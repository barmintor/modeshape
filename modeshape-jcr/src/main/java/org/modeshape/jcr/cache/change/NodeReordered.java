package org.modeshape.jcr.cache.change;

import java.util.HashMap;
import java.util.Map;

import org.modeshape.jcr.cache.NodeKey;
import org.modeshape.jcr.value.Path;
import org.modeshape.jcr.value.PathFactory;
import org.modeshape.jcr.value.ValueFactory;

/**
 * A change event which is generated by a {@link javax.jcr.Node#orderBefore(String, String)} operation.
 * 
 * @author Horia Chiorean
 */
public class NodeReordered extends AbstractNodeMovedChange {

    private static final long serialVersionUID = 1L;

    private final Path oldPath;
    private final NodeKey parent;
    private final Path reorderedBeforePath;

    public NodeReordered( NodeKey key,
                          NodeKey parent,
                          Path newPath,
                          Path oldPath,
                          Path reorderedBeforePath ) {
        super(key, newPath);
        this.oldPath = oldPath;
        this.parent = parent;
        this.reorderedBeforePath = reorderedBeforePath;
    }

    /**
     * { @inherit }
     */
    @Override
    public Path getOldPath(PathFactory paths) {
        return oldPath;
    }

    /**
     * { @inherit }
     */
    @Override
    public Map<String, String> getJcrEventInfo(ValueFactory<String> strings, Path oldPath, Path newPath) {
        Map<String, String> info = new HashMap<String, String>();
        // check if the reordering wasn't at the end by any chance
        if (getReorderedBeforePath() != null) {
            info.put(ORDER_DEST_KEY, strings.create(getReorderedBeforePath().getLastSegment()));
        } else {
            info.put(ORDER_DEST_KEY, null);
        }
        if (oldPath != null) {
            info.put(ORDER_SRC_KEY, strings.create(oldPath.getLastSegment()));
        }
        return info;
    }

    public NodeKey getParent() {
        return parent;
    }

    /**
     * Gets the path of the node at the "destination" of the reordering.
     * 
     * @return either a node path or <code>null</code>, in case a reordering has happened at the end of the children list
     */
    public Path getReorderedBeforePath() {
        return reorderedBeforePath;
    }
}
